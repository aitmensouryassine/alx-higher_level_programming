================================
 How to Use add_integer function
================================

NUMBERS
=======

>>> add_integer = __import__("0-add_integer").add_integer

``add_integer`` returns the addition of two integers
>>> add_integer(1, 2)
3

``add_integer`` also works with negative numbers
>>> add_integer(100, -2)
98

``add_integer`` the second argument (b=98) is optional
>>> add_integer(2)
100

``add_integer`` cast float numbers into integers and do the addition
>>> add_integer(100.3, -2)
98

``add_integer`` float overflow
>>> add_integer(1.7976931348623157e+308, 0.01)
179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368

NON-NUMBERS
===========

``add_integer`` raise a TypeError when a string is passed as argument

>>> add_integer(4, "School")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer("School", 4)
Traceback (most recent call last):
TypeError: a must be an integer

``add_integer`` raise a TypeError when a None is passed as argument

>>> add_integer(2, None)
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer (float('nan'), float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
