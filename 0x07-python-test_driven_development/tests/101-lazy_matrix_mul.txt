=====================================
 How to use lazy_matrix_mul function
=====================================

``lazy_matrix_mul`` multiplies two matrices (list of lists)

ERRORS
======

>>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul
>>> lazy_matrix_mul()
Traceback (most recent call last):
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

>>> lazy_matrix_mul([])
Traceback (most recent call last):
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

>>> lazy_matrix_mul(1, 1)
Traceback (most recent call last):
ValueError: Scalar operands are not allowed, use '*' instead

>>> lazy_matrix_mul([1], 1)
Traceback (most recent call last):
ValueError: Scalar operands are not allowed, use '*' instead

>>> lazy_matrix_mul([], [])
0.0

>>> lazy_matrix_mul([1], [])
Traceback (most recent call last):
ValueError: shapes (1,) and (0,) not aligned: 1 (dim 0) != 0 (dim 0)

>>> lazy_matrix_mul([[1]], [])
Traceback (most recent call last):
ValueError: shapes (1,1) and (0,) not aligned: 1 (dim 1) != 0 (dim 0)

>>> lazy_matrix_mul([[1]], [5])
array([5])

>>> lazy_matrix_mul([["1"]], [[5]])
Traceback (most recent call last):
TypeError: invalid data type for einsum

>>> lazy_matrix_mul([[1]], [["5"]])
Traceback (most recent call last):
TypeError: invalid data type for einsum

>>> lazy_matrix_mul([[1], [1, 1]], [[5]])
Traceback (most recent call last):
ValueError: setting an array element with a sequence.

>>> lazy_matrix_mul([[1, 1], [1, 1]], [[5], [5, 5]])
Traceback (most recent call last):
ValueError: setting an array element with a sequence.

>>> lazy_matrix_mul([[1, 1], [1, 1]], [[5, 5], [5, 5], [5, 5]])
Traceback (most recent call last):
ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

MATRICES OF INTEGERS
====================

>>> lazy_matrix_mul([[2]], [[4]])
array([[8]])

>>> lazy_matrix_mul([[2, 3]], [[4], [4]])
array([[20]])

>>> lazy_matrix_mul([[2]], [[4, 5]])
array([[ 8, 10]])

lazy_matrix_mul([[2, 3], [4, 5]], [[4], [4]])
array([[ 8, 10, 12]])

>>> lazy_matrix_mul([[2]], [[4, 5, 6]])
array([[ 8, 10, 12]])

>>> lazy_matrix_mul([[2], [3]], [[4, 5, 6, 7]]) #doctest: +NORMALIZE_WHITESPACE
array([[ 8, 10, 12, 14],
        [12, 15, 18, 21]])

>>> lazy_matrix_mul([[2, 3, 4], [4, 5, 6], [7, 8, 9]], [[2, 3, 4], [4, 5, 6], [7, 8, 9]]) #doctest: +NORMALIZE_WHITESPACE
array([[ 44,  53,  62],
        [ 70,  85, 100],
        [109, 133, 157]])

MATRICES OF FLOATS
===================

>>> lazy_matrix_mul([[2.02]], [[4.45]])
array([[8.989]])

>>> lazy_matrix_mul([[2.888888, 3.658]], [[4.245], [4.00005]])
array([[26.89551246]])

MATRICES OF FLOATS AND INTEGERS
===============================
>>> lazy_matrix_mul([[2.888888, 3]], [[4], [4.00005]])
array([[23.555702]])
